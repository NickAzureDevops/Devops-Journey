name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)
  
pool:
  name: Default

trigger: none 
resources:
  pipelines:
    - pipeline: DR-pipeline 
      source: CICD-production  
      trigger:
        branches:
          include:
            - main       

# Don't run against PRs
pr: none

variables:
  - name: backendServiceArm
    value: 'SP'
  - name: backendAzureRmResourceGroupName
    value: 'devops-journey-rg'
  - name: backendAzureRmStorageAccountName
    value: 'devopsjourney'
  - name: backendAzureRmContainerName
    value: 'tfstate'
  - name: backendAzureRmKey
    value: 'terraform.tfstate'
  - name: environment
    value: 'staging/staging'
  - name: terraform_version
    value:  '=0.15.4'
  - name: repository
    value: 'aspnet'
  - name: dockerfile
    value: '$(Build.SourcesDirectory)/Deploy-To-ACR/aspnet-core-dotnet-core/Dockerfile'
  - name: containerRegistry
    value: 'devopsjourneyacr'
  - group: devopsjourney

stages :
  - stage: validate
    jobs:
    - job: validate
      continueOnError: false
      steps:
      - task: TerraformInstaller@0
        displayName: 'install'
        inputs:
          terraformVersion: ${{ variables.terraform_version}}
      - task: TerraformTaskV2@2
        displayName: 'init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: ${{ variables.backendServiceArm }}
          backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
          backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
          backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
          backendAzureRmKey: ${{ variables.backendAzureRmKey }}
          workingDirectory: '$(System.DefaultWorkingDirectory)/Deploy-To-AKS/terraform/'
      - task: TerraformTaskV2@2
        displayName: 'validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'
          
  - stage: plan
    dependsOn: [validate]
    condition: succeeded('validate')
    jobs:
      - job: terraform_plan_develop
        steps:
        - task: TerraformInstaller@0
          displayName: 'install'
          inputs:
            terraformVersion: ${{ variables.terraform_version}}
        - task: TerraformTaskV2@2
          displayName: 'init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: ${{ variables.backendServiceArm }}
            backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
            backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
            backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
            backendAzureRmKey: ${{ variables.backendAzureRmKey }}
            workingDirectory: '$(System.DefaultWorkingDirectory)/Deploy-To-AKS/terraform/'
        - task: TerraformTaskV2@2
          displayName: 'plan'
          inputs:
            provider: 'azurerm'
            command: 'plan'
            commandOptions: '-input=false -var-file="../vars/${{ variables.environment }}.tfvars"'
            environmentServiceNameAzureRM: ${{ variables.backendServiceArm }}
            workingDirectory: '$(System.DefaultWorkingDirectory)/Deploy-To-AKS/terraform/'

        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)/'
            includeRootFolder: false
            archiveType: 'tar'
            tarCompression: 'gz'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tgz'
            replaceExistingArchive: true
            displayName: 'Create Plan Artifact'

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: '$(Build.BuildId)-tfplan'
            publishLocation: 'Container'
            displayName: 'Publish Plan Artifact'    

        - task: DeleteFiles@1
          displayName: 'Remove unneeded files'
          inputs:
            contents: |
                .terraform
                tfplan

  - stage: apply
    dependsOn: [plan]
    condition: succeeded('plan')
    jobs:
    - deployment: apply
      continueOnError: false
      environment: 'approvalgates-production'
      timeoutInMinutes: 600
      strategy:
       runOnce:
        deploy:
            steps:
              - checkout: none  

              - task: TerraformInstaller@0
                displayName: 'install'
                inputs:
                  terraformVersion: ${{ variables.terraform_version}}

              - task: ExtractFiles@1
                inputs:
                  archiveFilePatterns: '$(System.ArtifactsDirectory)/$(Build.BuildId)-tfplan/$(Build.BuildId).tgz'
                  destinationFolder: '$(System.DefaultWorkingDirectory)/'
                  cleanDestinationFolder: false
                  displayName: 'Extract Terraform Plan Artifact'

              - task: TerraformTaskV2@2
                displayName: 'init'
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  backendServiceArm: ${{ variables.backendServiceArm }}
                  backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
                  backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
                  backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
                  backendAzureRmKey: ${{ variables.backendAzureRmKey }}
                  workingDirectory: '$(System.DefaultWorkingDirectory)/Deploy-To-AKS/terraform/'

              - task: TerraformTaskV2@2
                displayName: 'plan'
                inputs:
                  provider: 'azurerm'
                  command: 'plan'
                  commandOptions: '-input=false -var-file="../vars/${{ variables.environment }}.tfvars"'
                  environmentServiceNameAzureRM: ${{ variables.backendServiceArm }}
                  workingDirectory: '$(System.DefaultWorkingDirectory)/Deploy-To-AKS/terraform/'

              - task: TerraformTaskV2@2
                displayName: 'apply'
                inputs:
                  provider: 'azurerm'
                  command: 'apply'
                  commandOptions: '-input=false -auto-approve -var-file="../vars/${{ variables.environment }}.tfvars"'
                  environmentServiceNameAzureRM: ${{ variables.backendServiceArm }}
                  workingDirectory: '$(System.DefaultWorkingDirectory)/Deploy-To-AKS/terraform/'
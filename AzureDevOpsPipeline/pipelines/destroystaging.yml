name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  - none
  
    # Don't run against PRs

variables:
  - name: backendServiceArm
    value: 'SP'
  - name: backendAzureRmResourceGroupName
    value: 'devops-journey-rg'
  - name: backendAzureRmStorageAccountName
    value: 'devopsjourney'
  - name: backendAzureRmContainerName
    value: 'tfstate'
  - name: backendAzureRmKey
    value: 'terraform.tfstate'
  - name: environment
    value: 'staging/staging'
  - name: terraform_version
    value: '0.15.4'

stages :
  - stage: validate
    jobs:
    - job: validate
      continueOnError: false
      steps:
      - task: TerraformInstaller@0
        displayName: 'install'
        inputs:
          terraformVersion: ${{ variables.terraform_version}}
      - task: TerraformTaskV2@2
        displayName: 'init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: ${{ variables.backendServiceArm }}
          backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
          backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
          backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
          backendAzureRmKey: ${{ variables.backendAzureRmKey }}
          workingDirectory: '$(System.DefaultWorkingDirectory)/AzureDevOpsPipeline/terraform/'
      - task: TerraformTaskV2@2
        displayName: 'validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'
          
  - stage: destroy
    dependsOn: [validate]
    condition: succeeded('validate')
    jobs:
      - job: terraform_destroy
        steps:
        - task: TerraformInstaller@0
          displayName: 'install'
          inputs:
            terraformVersion: ${{ variables.terraform_version}}
        - task: TerraformTaskV2@2
          displayName: 'init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: ${{ variables.backendServiceArm }}
            backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
            backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
            backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
            backendAzureRmKey: ${{ variables.backendAzureRmKey }} 
            workingDirectory: '$(System.DefaultWorkingDirectory)/AzureDevOpsPipeline/terraform/'
        - task: TerraformTaskV2@2
          displayName: 'destroy'
          inputs:
            provider: 'azurerm'
            command: 'destroy'
            commandOptions: '-input=false -auto-approve -var-file="../vars/${{ variables.environment }}.tfvars"'
            environmentServiceNameAzureRM: ${{ variables.backendServiceArm }}
            workingDirectory: '$(System.DefaultWorkingDirectory)/AzureDevOpsPipeline/terraform/'
        - task: AzurePowerShell@5
          displayName: 'Azure PowerShell script: InlineScript'
          inputs:
          azureSubscription: SP
          ScriptType: InlineScript
          Inline: 'Remove-AzResourceGroup -Name DefaultResourceGroup-SUK -Force'
          errorActionPreference: silentlyContinue
          azurePowerShellVersion: LatestVersion

      
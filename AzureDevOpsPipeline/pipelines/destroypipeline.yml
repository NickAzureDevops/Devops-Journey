trigger:
  - master
  
pool:
      vmImage: ubuntu-latest
    # Don't run against PRs

variables:
  - name: backendServiceArm
    value: 'SP'
  - name: backendAzureRmResourceGroupName
    value: 'devops-journey-rg'
  - name: backendAzureRmStorageAccountName
    value: 'devopsjourney'
  - name: backendAzureRmContainerName
    value: 'tfstate'
  - name: backendAzureRmKey
    value: 'terraform.tfstate'
  - name: environment
    value: 'production'
  - name: terraform_version
    value: '0.15.4'

stages :
  - stage: validate
    jobs:
    - job: validate
      continueOnError: false
      steps:
      - task: TerraformInstaller@0
        displayName: 'install'
        inputs:
          terraformVersion: '0.13.4'
      - task: TerraformTaskV1@0
        displayName: 'init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: ${{ variables.backendServiceArm }}
          backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
          backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
          backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
          backendAzureRmKey: ${{ variables.backendAzureRmKey }}
          workingDirectory: '$(System.DefaultWorkingDirectory)/AzureDevOpsPipeline/terraform/'
      - task: TerraformTaskV1@0
        displayName: 'validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'

  - stage: destroy
    dependsOn: [validate]
    condition: succeeded('validate')
    jobs:
      - job: terraform_destroy
        steps:
              - checkout: self
              - task: TerraformInstaller@0
                displayName: 'install'
                inputs:
                  terraformVersion: '0.13.4'
              - task: TerraformTaskV1@0
                displayName: 'init'
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
                  backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
                  backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
                  backendAzureRmKey: ${{ variables.backendAzureRmKey }}
                  workingDirectory: '$(System.DefaultWorkingDirectory)/AzureDevOpsPipeline/terraform/'
              - task: TerraformTaskV1@0
                displayName: 'destroy'
                inputs:
                  provider: 'azurerm'
                  command: 'destroy'
                  commandOptions: '-input=false -var-file="../vars/${{ variables.environment }}.tfvars"'
                  environmentServiceNameAzureRM: ${{ variables.backendServiceArm }}
                  workingDirectory: '$(System.DefaultWorkingDirectory)/AzureDevOpsPipeline/terraform/'
